'use strict';

/* __V3D_TEMPLATE__ - template-based file; delete this line to prevent this file from being updated */

window.addEventListener('load', function() {

var CONTAINER_ID = 'v3d-container';

(function() {

    var params = v3d.AppUtils.getPageParams();

    var PUZZLES_DIR = '/puzzles/';
    var logicURL = params.logic ? params.logic : '__LOGIC__visual_logic.js'.replace('__LOGIC__', '');
    var sceneURL = params.load ? params.load : '__URL__Champion.gltf'.replace('__URL__', '');
    if (!sceneURL) {
        console.log('No scene URL specified');
        return;
    }

    // some puzzles can benefit from cache
    v3d.Cache.enabled = true;

    if (v3d.AppUtils.isXML(logicURL)) {
        var logicURLJS = logicURL.match(/(.*)\.xml$/)[1] + '.js';
        new v3d.PuzzlesLoader().loadEditorWithLogic(PUZZLES_DIR, logicURLJS,
            function() {
                var initOptions = v3d.PL ? v3d.PL.execInitPuzzles({
                        container: CONTAINER_ID }).initOptions
                        : { useFullscreen: true };
                var appInstance = loadScene(sceneURL, initOptions);
                v3d.PE.viewportUseAppInstance(appInstance);
            }
        );
    } else if (v3d.AppUtils.isJS(logicURL)) {
        new v3d.PuzzlesLoader().loadLogic(logicURL, function() {
            var initOptions = v3d.PL ? v3d.PL.execInitPuzzles({
                    container: CONTAINER_ID }).initOptions
                    : { useFullscreen: true };
            loadScene(sceneURL, initOptions);
        });
    } else {
        loadScene(sceneURL, { useFullscreen: true });
    }
})();

function loadScene(sceneURL, initOptions) {

    initOptions = initOptions || {};

    var ctxSettings = {};
    if (initOptions.useBkgTransp) ctxSettings.alpha = true;
    if (initOptions.preserveDrawBuf) ctxSettings.preserveDrawingBuffer = true;

    var preloader = initOptions.useCustomPreloader
            ? createCustomPreloader(initOptions.preloaderProgressCb,
            initOptions.preloaderEndCb)
            : new v3d.SimplePreloader({ container: CONTAINER_ID });

    if (v3d.PE) {
        puzzlesEditorPreparePreloader(preloader);
    }

    var app = new v3d.App(CONTAINER_ID, ctxSettings, preloader);
    if (initOptions.useBkgTransp) {
        app.clearBkgOnLoad = true;
        app.renderer.setClearColor(0x000000, 0);
    }

    // namespace for communicating with code generated by Puzzles
    app.ExternalInterface = {};
    prepareExternalInterface(app);

    if (initOptions.preloaderStartCb) initOptions.preloaderStartCb();
    if (initOptions.useFullscreen) {
        initFullScreen();
    } else {
        var fsButton = document.getElementById('fullscreen_button');
        if (fsButton) fsButton.style.display = 'none';
    }

    sceneURL = initOptions.useCompAssets ? sceneURL + '.xz' : sceneURL;
    app.loadScene(sceneURL, function() {
        app.enableControls();
        app.run();

        if (v3d.PE) v3d.PE.updateAppInstance(app);
        if (v3d.PL) v3d.PL.init(app, initOptions);

        runCode(app);
    }, null, function() {
        console.log('Can\'t load the scene ' + sceneURL);
    });

    return app;
}

function createCustomPreloader(updateCb, finishCb) {
    function CustomPreloader() {
        v3d.Preloader.call(this);
    }

    CustomPreloader.prototype = Object.assign(Object.create(v3d.Preloader.prototype), {
        onUpdate: function(percentage) {
            v3d.Preloader.prototype.onUpdate.call(this, percentage);
            if (updateCb) updateCb(percentage);
        },
        onFinish: function() {
            v3d.Preloader.prototype.onFinish.call(this);
            if (finishCb) finishCb();
        }
    });

    return new CustomPreloader();
}

/**
 * Modify the app's preloader to track the loading process in the Puzzles Editor.
 */
function puzzlesEditorPreparePreloader(preloader) {
    // backward compatibility for loading new projects within the old Puzzles Editor
    if (v3d.PE.loadingUpdateCb !== undefined && v3d.PE.loadingFinishCb !== undefined) {
        var _onUpdate = preloader.onUpdate.bind(preloader);
        preloader.onUpdate = function(percentage) {
            _onUpdate(percentage);
            v3d.PE.loadingUpdateCb(percentage);
        }

        var _onFinish = preloader.onFinish.bind(preloader);
        preloader.onFinish = function() {
            _onFinish();
            v3d.PE.loadingFinishCb();
        }
    }
}

function initFullScreen() {

    var fsButton = document.getElementById('fullscreen_button');
    if (!fsButton) return;

    var container = document.getElementById(CONTAINER_ID);

    if (document.fullscreenEnabled ||
            document.webkitFullscreenEnabled ||
            document.mozFullScreenEnabled ||
            document.msFullscreenEnabled)
        fsButton.style.display = 'inline';

    fsButton.addEventListener('click', function(event) {
        event.stopPropagation();
        if (document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement) {
            exitFullscreen();
        } else
            requestFullscreen(container);
    });

    function changeFullscreen() {
        if (document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement) {
            fsButton.classList.remove('fullscreen-open');
            fsButton.classList.add('fullscreen-close');
        } else {
            fsButton.classList.remove('fullscreen-close');
            fsButton.classList.add('fullscreen-open');
        }
    }

    document.addEventListener('webkitfullscreenchange', changeFullscreen);
    document.addEventListener('mozfullscreenchange', changeFullscreen);
    document.addEventListener('msfullscreenchange', changeFullscreen);
    document.addEventListener('fullscreenchange', changeFullscreen);

    function requestFullscreen(elem) {
        if (elem.requestFullscreen)
            elem.requestFullscreen();
        else if (elem.mozRequestFullScreen)
            elem.mozRequestFullScreen();
        else if (elem.webkitRequestFullscreen)
            elem.webkitRequestFullscreen();
        else if (elem.msRequestFullscreen)
            elem.msRequestFullscreen();
    }

    function exitFullscreen() {
        if (document.exitFullscreen)
            document.exitFullscreen();
        else if (document.mozCancelFullScreen)
            document.mozCancelFullScreen();
        else if (document.webkitExitFullscreen)
            document.webkitExitFullscreen();
        else if (document.msExitFullscreen)
            document.msExitFullscreen();
    }
}

function prepareExternalInterface(app) {
    app.ExternalInterface.toggleOptions = function (part) {
        $(`#${part}`).click()
    }

    app.ExternalInterface.getSelectedObject = function () {
        return $('#material_container').data('selected')
    }

    app.ExternalInterface.getActivatedShoe = function () {
        return $('#side_shoe').data('sideshoe')
    }

    app.ExternalInterface.getCustomLogoContent = function (isLeft) {
        if (isLeft) {
            return $('#custom_logo').data('customtext1')
        } else {
            return $('#custom_logo').data('customtext')
        }
    }

    app.ExternalInterface.setCustomLogoContent = function (isLeft, value) {
        if (isLeft) {
            $('#custom_logo').data('customtext1', value)
        } else {
            $('#custom_logo').data('customtext', value)
        }
        $('#custom_logo_text').val(value)
    }

    app.ExternalInterface.setCustomLogoColor = function (isLeft, value) {
        if (isLeft) {
            $('#custom_logo').data('customcolor1', value)
        } else {
            $('#custom_logo').data('customcolor', value)
        }
    }

    app.ExternalInterface.setCustomLogoBgColor = function (isLeft, value) {
        if (isLeft) {
            $('#custom_logo').data('custombgcolor1', value)
        } else {
            $('#custom_logo').data('custombgcolor', value)
        }
    }

    app.ExternalInterface.getRightShoeAttr = function () {
        let material = $('#material')
        let customLogo = $('#custom_logo')
        return {
            parts: [
                ['strap', material.data('strap')],
                ['toe', material.data('toe')],
                ['tongue', material.data('tongue')],
                ['right', material.data('right')],
                ['left', material.data('left')],
                ['counter', material.data('counter')],
                ['top', material.data('top')],
            ],
            StrapLogo1: material.data('straplogo1'),
            StrapLogo2: material.data('straplogo2'),
            RightLogo1: material.data('rightlogo1'),
            RightLogo2: material.data('rightlogo2'),
            LeftLogo: material.data('leftlogo'),
            CounterLogo: material.data('counterlogo'),
            customtext: customLogo.data('customtext'),
            customcolor: customLogo.data('customcolor'),
        }
    }
}

function runCode(app) {
    function initCustomLogo(isLeft) {
        let customLogo = $('#custom_logo')
        $('#custom_logo_text').val(customLogo.data(isLeft ? 'customtext1' : 'customtext'))
        $('#custom_logo_color').val(customLogo.data(isLeft ? 'customcolor1' : 'customcolor'))
        $('#custom_logo_bg_color').val(customLogo.data(isLeft ? 'custombgcolor1' : 'custombgcolor'))
        if (customLogo.data(isLeft ? 'custom1' : 'custom')) {
            $('#custom_logo_ckb').prop( "checked", true );
            $('#custom_logo_content').show()
        } else {
            $('#custom_logo_ckb').prop( "checked", false);
            $('#custom_logo_content').hide()
        }
    }

    $(document).on('click', '.material-item', function () {
        $(this).addClass('selected').siblings().removeClass('selected')
        let selectedPart = $('#material_container').data('selected')
        selectedPart += $('#side_shoe').data('sideshoe') === 'left_shoe' ? "1" : ""
        $('#material').data(selectedPart.toLowerCase(), $(this).attr('id'))
    })

    $(document).on('click', '.part', function () {
        $(this).addClass('selected').siblings().removeClass('selected')
        let id = $(this).attr("id")
        let name = $(this).data("name")
        $(`#material_container`).data("selected", id)
        $('#part_name').text(name.toUpperCase())
        $('.material-item.selected').removeClass('selected')
        $('#option_current').text($(this).data('order') + 1)
        $('#option_name').text(name)
        let type = $(this).data("type")
        if (type === 'part') {
            $('#material_color').show().siblings().hide()
            if (id === 'Top') {
                $('.top').show()
            } else {
                $('.top').hide()
            }
        } else if (type === 'dial') {
            $('#dial_color').show().siblings().hide()
        } else if (type === 'custom') {
            $('#custom_logo').show().siblings().hide()
        }
        else {
            $('#material_logo').show().siblings().hide()
        }
        let isLeft = $('#side_shoe').data('sideshoe') === 'left_shoe'
        let selectingMaterial = $('#material').data(isLeft ? id.toLowerCase().concat("1") : id.toLowerCase())
        $(`#${selectingMaterial}`).addClass('selected')

        initCustomLogo(isLeft)
    })

    $('.side-btn').bind('click', function () {
        let activatedBtn = $('#side_shoe').data('sideshoe')
        let selectedBtn = $(this).attr('id')
        if (activatedBtn !== selectedBtn) {
            if (selectedBtn !== 'pair_shoe') {
                $('.part').prop('disabled', false)
                $('#size').hide()
                $('#material_container').show()
                let selectedPart = $(`#material_container`).data("selected")
                let selectingMaterial = $('#material').data(selectedBtn ==='left_shoe' ?
                    selectedPart.toLowerCase().concat("1") :
                    selectedPart.toLowerCase())
                $(`#${selectingMaterial}`).addClass('selected').siblings().removeClass('selected')

            } else {
                $('.part').prop('disabled', true)
                $('#material_container').hide()
                $('#size').show()
                $('#pair_shoe').data('clicked','1')
            }
            $('.side-btn').removeClass('btn-danger').addClass('btn-outline-danger')
            $(this).removeClass('btn-outline-danger').addClass('btn-danger')
            $('#side_shoe').data('sideshoe', selectedBtn)

            if (selectedBtn === 'right_shoe') {
                $(`#${$('#material').data('set')}`).click()
                initCustomLogo(false)
            } else if (selectedBtn === 'left_shoe') {
                $(`#${$('#material').data('set1')}`).click()
                initCustomLogo(true)
            }

        }
    })

    $('.size-item').bind('click', function() {
        $(this).addClass('selected').siblings().removeClass('selected')
        let size = $(this).children().text()
        $('#size').data('selectedSize', size)
        if (parseInt(size) < 225) {
            $('#mount_192').prop('disabled', true)
            $('#mount_165').prop('checked', true)
        } else {
            $('#mount_192').prop('disabled', false)
        }
    })

    $('.cart').bind('click', function() {
        if ($('#pair_shoe').data('clicked') === 0) {
            $('#pair_shoe').click()
            $('.alert').addClass('show')
            setTimeout(() => {
                $('.alert').addClass('show').removeClass('show')
            }, 2000)
            $('#pair_shoe').data('clicked', 1)
        } else {
            addToCart()
        }
    })

    function addToCart () {
        let material = $('#material')
        let customLogo = $('#custom_logo')
        let data = {
            toe_right: material.data('toe'),
            toe_left: material.data('toe1'),
            tongue_right: material.data('tongue'),
            tongue_left: material.data('tongue1'),
            cover_right: material.data('strap'),
            cover_left: material.data('strap1'),
            outside_right: material.data('left'),
            outside_left: material.data('left1'),
            inside_right: material.data('right'),
            inside_left: material.data('right1'),
            counter_right: material.data('counter'),
            counter_left: material.data('counter1'),
            backtop_right: material.data('top'),
            backtop_left: material.data('top1'),
            dial_right: material.data('dial'),
            dial_left: material.data('dial1'),
            custom_text_right: customLogo.data('customtext'),
            custom_text_left: customLogo.data('customtext1'),
            custom_color: customLogo.data('customcolor'),
            custom_color1: customLogo.data('customcolor1'),
            custom_bg: customLogo.data('custombg'),
            custom_bg1: customLogo.data('custombg1'),
            cover_logo_right: material.data('straplogo'),
            cover_logo_left: material.data('straplogo1'),
            outside_logo_1_right: material.data('rightlogo1'),
            outside_logo_1_left: material.data('rightlogo2'),
            outside_logo_2_right: material.data('rightlogo11'),
            outside_logo_2_left: material.data('rightlogo21'),
            counter_logo_right: material.data('counterlogo'),
            counter_logo_left: material.data('counterlogo1'),
            set_right: material.data('set'),
            set_left: material.data('set1'),
        }

        window.parent.postMessage({cmd: 'addToCart', value: JSON.stringify(data)}, 'https://cityrun.scantobim.vn/');
    }

    $('#set1').bind('click', function() {
        let activatedShoe = $('#side_shoe').data('sideshoe')
        if (activatedShoe === 'right_shoe') {
            $('#material').data('set','set1')
        } else if (activatedShoe === 'left_shoe') {
            $('#material').data('set1','set1')
        }
    })

    $('#set2').bind('click', function() {
        let activatedShoe = $('#side_shoe').data('sideshoe')
        if (activatedShoe === 'right_shoe') {
            $('#material').data('set','set2')
        } else if (activatedShoe === 'left_shoe') {
            $('#material').data('set1','set2')
        }
    })

    $('#custom_logo_ckb').bind('change', function () {
        let isCheck = $(this).is(':checked')
        if (isCheck) {
            $('#custom_logo_content').show()
        } else {
            $('#custom_logo_content').hide()
        }
        if ($('#side_shoe').data('sideshoe') === 'right_shoe') {
            $('#custom_logo').data('custom', isCheck)
        } else {
            $('#custom_logo').data('custom1', isCheck)
        }
    })
}

});
